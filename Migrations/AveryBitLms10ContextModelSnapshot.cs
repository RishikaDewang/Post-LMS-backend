// <auto-generated />
using System;
using LMS.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LMS.Migrations
{
    [DbContext(typeof(AveryBitLms10Context))]
    partial class AveryBitLms10ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LMS.Models.AssignedTrainingPlanCoursePriority", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("assigncoursepriority_id")
                        .HasColumnType("integer");

                    b.Property<string>("priority_name")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("priority_name");

                    b.HasKey("id");

                    b.ToTable("AssignedTrainingPlanCoursePriority", (string)null);
                });

            modelBuilder.Entity("LMS.Models.AssignedTrainingPlanCourseStatus", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("assigncoursestatus_id")
                        .HasColumnType("integer");

                    b.Property<string>("status_name")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("status_name");

                    b.HasKey("id");

                    b.ToTable("AssignedTrainingPlanCourseStatus", (string)null);
                });

            modelBuilder.Entity("LMS.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("CategoryName")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.HasKey("Id")
                        .HasName("PK_courseCategory");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("LMS.Models.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("CourseDuration")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("course_duration");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("date")
                        .HasColumnName("deleted_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("FeaturedImage")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("featured_image");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Keywords")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("keywords");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.Property<string>("PdfUpload")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("pdf_upload");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("VideoLink")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("video_link");

                    b.HasKey("ID")
                        .HasName("PK_courses");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("LMS.Models.CourseCategoryMapping", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int?>("FkCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_category_id");

                    b.Property<int?>("FkCourseId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_course_id");

                    b.HasKey("Id")
                        .HasName("PK_courseCategoryMapping");

                    b.HasIndex("FkCategoryId");

                    b.HasIndex("FkCourseId");

                    b.ToTable("CourseCategoryMapping", (string)null);
                });

            modelBuilder.Entity("LMS.Models.Designation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("DesignationName")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("designation_name");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.HasKey("Id")
                        .HasName("PK_designation");

                    b.ToTable("Designation", (string)null);
                });

            modelBuilder.Entity("LMS.Models.DesignationTrainingPlan", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int?>("FkDesignationId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_designation_id");

                    b.Property<int?>("FkTrainingplanId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_trainingplan_id");

                    b.HasKey("Id")
                        .HasName("PK_designationCourseTrainingPlanMapping");

                    b.HasIndex("FkDesignationId");

                    b.HasIndex("FkTrainingplanId");

                    b.ToTable("DesignationTrainingPlans");
                });

            modelBuilder.Entity("LMS.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("role_name");

                    b.HasKey("Id")
                        .HasName("PK_role");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("LMS.Models.TrainingPlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("FeaturedImage")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("featured_image");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<int?>("PlannedDurationDays")
                        .HasColumnType("integer")
                        .HasColumnName("planned_duration_days");

                    b.Property<string>("TrainingPlanName")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("training_plan_name");

                    b.HasKey("Id")
                        .HasName("PK_trainingPlan");

                    b.ToTable("TrainingPlans");
                });

            modelBuilder.Entity("LMS.Models.TrainingPlanCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("FkCourseId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_course_id");

                    b.Property<int?>("FkPlanId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_plan_id");

                    b.HasKey("Id")
                        .HasName("PK_trainingPlanCourses");

                    b.HasIndex("FkCourseId");

                    b.HasIndex("FkPlanId");

                    b.ToTable("TrainingPlanCourses");
                });

            modelBuilder.Entity("LMS.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("created_date");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<int?>("FkDesignationId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_designation_id");

                    b.Property<int?>("FkRoleId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_role_id");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("ModifiedBy")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date")
                        .HasColumnName("modified_date");

                    b.Property<string>("Name")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Profile")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("Profile");

                    b.HasKey("Id");

                    b.HasIndex("FkDesignationId");

                    b.HasIndex("FkRoleId");

                    b.ToTable("Users", t =>
                        {
                            t.HasTrigger("tr_Users_fordelete");

                            t.HasTrigger("tr_Users_forinsert");
                        });
                });

            modelBuilder.Entity("LMS.Models.UserActivityLogsAuditrail", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<string>("ActivityType")
                        .IsUnicode(false)
                        .HasColumnType("text")
                        .HasColumnName("activity_type");

                    b.Property<string>("Detail")
                        .HasColumnType("text")
                        .HasColumnName("detail");

                    b.Property<int?>("FkUserId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_user_id");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("timestamp");

                    b.HasKey("Id");

                    b.ToTable("UserActivityLogs/Auditrail", (string)null);
                });

            modelBuilder.Entity("LMS.Models.UserAssignCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateAssigned")
                        .HasColumnType("date")
                        .HasColumnName("date_assigned");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("date")
                        .HasColumnName("date_completed");

                    b.Property<int?>("FkCourseId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_course_id");

                    b.Property<int?>("FkTrainingplanId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_trainingplan_id");

                    b.Property<int?>("FkUserId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_user_Id");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<int?>("assigncoursepriority_id")
                        .HasColumnType("integer");

                    b.Property<int?>("assigncoursestatus_id")
                        .HasColumnType("integer")
                        .HasColumnName("assigncoursestatus_id");

                    b.HasKey("Id")
                        .HasName("PK_userAssignCourse");

                    b.HasIndex("FkCourseId");

                    b.HasIndex("FkTrainingplanId");

                    b.HasIndex("FkUserId");

                    b.HasIndex("assigncoursepriority_id");

                    b.HasIndex("assigncoursestatus_id");

                    b.ToTable("UserAssignCourse", (string)null);
                });

            modelBuilder.Entity("LMS.Models.UserCourseProgress", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int?>("FkCourseId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_course_id");

                    b.Property<int?>("FkUserId")
                        .HasColumnType("integer")
                        .HasColumnName("fk_user_id");

                    b.Property<DateTime?>("LastAccessed")
                        .HasColumnType("date")
                        .HasColumnName("last_accessed");

                    b.Property<bool?>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("PK_userCourseProgress");

                    b.HasIndex("FkCourseId");

                    b.ToTable("UserCourseProgress", (string)null);
                });

            modelBuilder.Entity("LMS.Models.CourseCategoryMapping", b =>
                {
                    b.HasOne("LMS.Models.Category", "FkCategory")
                        .WithMany("CourseCategoryMappings")
                        .HasForeignKey("FkCategoryId")
                        .HasConstraintName("FK_CourseCategoryMapping_Category");

                    b.HasOne("LMS.Models.Course", "FkCourse")
                        .WithMany("CourseCategoryMappings")
                        .HasForeignKey("FkCourseId")
                        .HasConstraintName("FK_CourseCategoryMapping_Courses");

                    b.Navigation("FkCategory");

                    b.Navigation("FkCourse");
                });

            modelBuilder.Entity("LMS.Models.DesignationTrainingPlan", b =>
                {
                    b.HasOne("LMS.Models.Designation", "FkDesignation")
                        .WithMany("DesignationTrainingPlans")
                        .HasForeignKey("FkDesignationId")
                        .HasConstraintName("FK_DesignationTrainingPlans_Designation");

                    b.HasOne("LMS.Models.TrainingPlan", "FkTrainingplan")
                        .WithMany("DesignationTrainingPlans")
                        .HasForeignKey("FkTrainingplanId")
                        .HasConstraintName("FK_DesignationTrainingPlans_TrainingPlans");

                    b.Navigation("FkDesignation");

                    b.Navigation("FkTrainingplan");
                });

            modelBuilder.Entity("LMS.Models.TrainingPlanCourse", b =>
                {
                    b.HasOne("LMS.Models.Course", "FkCourse")
                        .WithMany("TrainingPlanCourses")
                        .HasForeignKey("FkCourseId")
                        .HasConstraintName("FK_TrainingPlanCourse_Courses");

                    b.HasOne("LMS.Models.TrainingPlan", "FkPlan")
                        .WithMany("TrainingPlanCourses")
                        .HasForeignKey("FkPlanId")
                        .HasConstraintName("FK_TrainingPlanCourses_TrainingPlans");

                    b.Navigation("FkCourse");

                    b.Navigation("FkPlan");
                });

            modelBuilder.Entity("LMS.Models.User", b =>
                {
                    b.HasOne("LMS.Models.Designation", "FkDesignation")
                        .WithMany("Users")
                        .HasForeignKey("FkDesignationId")
                        .HasConstraintName("FK_Users_Designation");

                    b.HasOne("LMS.Models.Role", "FkRole")
                        .WithMany("Users")
                        .HasForeignKey("FkRoleId")
                        .HasConstraintName("FK_Users_Role");

                    b.Navigation("FkDesignation");

                    b.Navigation("FkRole");
                });

            modelBuilder.Entity("LMS.Models.UserAssignCourse", b =>
                {
                    b.HasOne("LMS.Models.Course", "FkCourse")
                        .WithMany("UserAssignCourses")
                        .HasForeignKey("FkCourseId")
                        .HasConstraintName("FK_userAssignCourse_Courses");

                    b.HasOne("LMS.Models.TrainingPlan", "FkTrainingPlan")
                        .WithMany("UserAssignCourses")
                        .HasForeignKey("FkTrainingplanId")
                        .HasConstraintName("FK_userAssignCourse_TrainingPlan");

                    b.HasOne("LMS.Models.User", "FkUser")
                        .WithMany("UserAssignCourses")
                        .HasForeignKey("FkUserId")
                        .HasConstraintName("FK_userAssignCourse_User");

                    b.HasOne("LMS.Models.AssignedTrainingPlanCoursePriority", "FKAssignedTrainingPlanCoursePriority")
                        .WithMany("UserAssignCourses")
                        .HasForeignKey("assigncoursepriority_id")
                        .HasConstraintName("FK_UserAssignCourse_AssignedTrainingPlanCoursePriority");

                    b.HasOne("LMS.Models.AssignedTrainingPlanCourseStatus", "FKAssignedTrainingPlanCourseStatus")
                        .WithMany("UserAssignCourses")
                        .HasForeignKey("assigncoursestatus_id")
                        .HasConstraintName("FK_UserAssignCourse_AssignedTrainingPlanCourseStatus");

                    b.Navigation("FKAssignedTrainingPlanCoursePriority");

                    b.Navigation("FKAssignedTrainingPlanCourseStatus");

                    b.Navigation("FkCourse");

                    b.Navigation("FkTrainingPlan");

                    b.Navigation("FkUser");
                });

            modelBuilder.Entity("LMS.Models.UserCourseProgress", b =>
                {
                    b.HasOne("LMS.Models.Course", "FkCourse")
                        .WithMany("UserCourseProgresses")
                        .HasForeignKey("FkCourseId")
                        .HasConstraintName("FK_UserCourseProgress_Courses");

                    b.Navigation("FkCourse");
                });

            modelBuilder.Entity("LMS.Models.AssignedTrainingPlanCoursePriority", b =>
                {
                    b.Navigation("UserAssignCourses");
                });

            modelBuilder.Entity("LMS.Models.AssignedTrainingPlanCourseStatus", b =>
                {
                    b.Navigation("UserAssignCourses");
                });

            modelBuilder.Entity("LMS.Models.Category", b =>
                {
                    b.Navigation("CourseCategoryMappings");
                });

            modelBuilder.Entity("LMS.Models.Course", b =>
                {
                    b.Navigation("CourseCategoryMappings");

                    b.Navigation("TrainingPlanCourses");

                    b.Navigation("UserAssignCourses");

                    b.Navigation("UserCourseProgresses");
                });

            modelBuilder.Entity("LMS.Models.Designation", b =>
                {
                    b.Navigation("DesignationTrainingPlans");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("LMS.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("LMS.Models.TrainingPlan", b =>
                {
                    b.Navigation("DesignationTrainingPlans");

                    b.Navigation("TrainingPlanCourses");

                    b.Navigation("UserAssignCourses");
                });

            modelBuilder.Entity("LMS.Models.User", b =>
                {
                    b.Navigation("UserAssignCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
